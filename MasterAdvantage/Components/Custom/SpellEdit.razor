@inject DBService db

<MudCard Style="height: 100%">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h3">Spells</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="() => CardClosed.InvokeAsync()" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <div class="d-flex my-2">
            @if (selectedSpell == null)
            {
                <MudAutocomplete T="Spell" Label="Spell" @bind-Value="selectedSpell" SearchFunc="@SpellSearch" Clearable="true" ToStringFunc="s => s?.Name" />
            }
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="CreateSpell" Variant="Variant.Filled" Color="Color.Success" />
        </div>
        @if (selectedSpell != null)
        {
            <MudTextField @bind-Value=selectedSpell.Name Label="Name" Variant="Variant.Outlined" />
            <div class="d-flex mb-2 gap-2">
                <MudNumericField Label="AP" @bind-Value=selectedSpell.AP Variant="Variant.Outlined" />
                <MudNumericField Label="MP" @bind-Value=selectedSpell.MP Variant="Variant.Outlined" />
            </div>
            <MudTextField @bind-Value=selectedSpell.Range Label="Range" Class="mb-2" Variant="Variant.Outlined" />
            <div class="d-flex gap-2 mb-2">
                <MudTextField @bind-Value=selectedSpell.Duration Label="Duration" Variant="Variant.Outlined" />
                <MudCheckBox @bind-Value=selectedSpell.Concentration Label="Concentration" Class="my-auto"/>
            </div>
            <MudTextField @bind-Value=selectedSpell.Description Label="Description" Class="mb-2" Lines="15" Variant="Variant.Outlined" />
            <div class="d-flex">
                <MudText Class="my-auto">Enhancements</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => editEnhancement = new()" Class="my-auto" Variant="Variant.Filled" Color="Color.Success">+</MudIconButton>
            </div>
            @if (selectedSpell.Enhancements != null)
            {
                <div class="d-flex flex-wrap">
                    @foreach (var enhancement in selectedSpell.Enhancements)
                    {
                        <MudChip T="string" Color="Color.Primary" OnClick="() => editEnhancement = enhancement" OnClose="() => RemoveEnhancement(enhancement)">@enhancement.Name</MudChip>
                    }
                </div>
            }
            @if (editEnhancement != null)
            {
                <MudTextField @bind-Value=editEnhancement.Name Variant="Variant.Outlined" Label="Name" Placeholder="New Enhancement" />
                <div class="d-flex gap-2">
                    <MudNumericField Label="AP" @bind-Value=editEnhancement.AP Variant="Variant.Outlined" />
                    <MudNumericField Label="MP" @bind-Value=editEnhancement.MP Variant="Variant.Outlined" />
                </div>
                <MudTextField @bind-Value=editEnhancement.Description Variant="Variant.Outlined" Label="Description" Lines="3" />
                <MudButton OnClick="AddSpellEnhancement" FullWidth="true" Color="Color.Success" Variant="Variant.Filled">Save</MudButton>
            }
        }
    </MudCardContent>
    <MudCardActions>
        @if (selectedSpell != null)
        {
            <MudButton OnClick="SaveSpell" FullWidth="true" Color="Color.Success" Variant="Variant.Filled">Save</MudButton>
        }
    </MudCardActions>
</MudCard>

@code {
    private Spell? selectedSpell { get; set; }
    private SpellEnhancement? editEnhancement { get; set; }
    [Parameter] public EventCallback CardClosed { get; set; }

    private async Task<IEnumerable<Spell>> SpellSearch(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return await db.GetSpellsAsync();
        return await db.SearchSpellsAsync(value);
    }

    private async Task AddSpellEnhancement()
    {
        if (!selectedSpell!.Enhancements.Contains(editEnhancement!))
        {
            selectedSpell!.Enhancements.Add(editEnhancement!);
            editEnhancement!.SpellId = selectedSpell.Id;
        }
        await db.UpdateSpellEnhancement(editEnhancement!);
        editEnhancement = null;
    }

    private async Task SaveSpell()
    {
        await db.UpdateSpell(selectedSpell!);
        selectedSpell = null;
    }

    private async Task RemoveEnhancement(SpellEnhancement enhancement)
    {
        selectedSpell!.Enhancements.Remove(enhancement);
        await db.DeleteSpellEnhancementAsync(enhancement);
    }

    private async Task CreateSpell()
    {
        selectedSpell = new();
        selectedSpell = await db.UpdateSpell(selectedSpell);
    }
}
