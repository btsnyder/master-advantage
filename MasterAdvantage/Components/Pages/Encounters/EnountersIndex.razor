@page "/"
@inject DBService db
@inject ISnackbar Snackbar
@implements IDisposable
@using System.Timers;
@using MasterAdvantage.Components.Pages.Encounters.Mobile;

<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudTable T="EncounterItem" Items="encounter.Items.Where(i => gmView || !i.Hidden).OrderByDescending(i => i.Initiative)" Class="mb-4" RowClassFunc="@((encounter, index) => encounter.RowClass)">
        <ColGroup>
            <col style="width:5%" />
            <col style="width:50px;" />
            <col />
            <col />
            <col style="width:5%" />
            <col style="width:5%" />
            <col style="width:5%" />
            <col />
            <col style="width:150px;" />
            <col style="width:50px;" />
            <col style="width:50px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>
                Init
                <MudToggleIconButton Toggled="@editInitative" ToggledChanged="InitativeToggled" Size="Size.Small" Class="my-auto" 
                                        Icon="@Icons.Material.Filled.Edit" 
                                        ToggledIcon="@Icons.Material.Filled.Check" ToggledColor="@Color.Success"/>
            </MudTh>
            <MudTh />
            <MudTh>Name</MudTh>
            <MudTh>Player Name</MudTh>
            <MudTh>PD</MudTh>
            <MudTh>MD</MudTh>
            <MudTh>Conditions</MudTh>
            <MudTh>HP</MudTh>
            <MudTh>Action Points</MudTh>
            <MudTh />
            <MudTh />
        </HeaderContent>
        <RowTemplate>
            <EnounterItemViewRow Item="context" EditInitative="editInitative" GMView="gmView" CreatureCopied="CopyCreature" CreatureRemoved="@((item) => RemoveCreature(item))"
                EncounterItemUpdated="SaveEncounter" ViewPersonClicked="ViewPersonClicked"/>
        </RowTemplate>
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" />
        </EditButtonContent>
    </MudTable>
    <div class="d-flex flex-wrap">
        <MudSwitch @bind-Value="gmView" Color="Color.Info" Class="my-auto">GM View</MudSwitch>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-auto" @onclick="SaveEncounter">
            Save
        </MudButton>
        <MudSpacer/>
        <MudSpacer />
        <MudSpacer />
        <MudAutocomplete T="string" @bind-Value="creatureSearch" SearchFunc="CreatureSearch" CoerceValue="true" CoerceText="false"
                        AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="my-2 me-6" />
        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewItem" />
    </div>
    <MudOverlay @bind-Visible="creatureOverlayVisible" DarkBackground>
        <MudPaper>
            <MudDrawer @bind-Open="weaponOverlayVisible" Elevation="0" Anchor="Anchor.End" Variant="@DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Width="500px">
                <WeaponEdit CardClosed="() => weaponOverlayVisible = false" />
            </MudDrawer>
            <MudDrawer @bind-Open="spellOverlayVisible" Elevation="0" Anchor="Anchor.End" Variant="@DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Width="500px">
                <SpellEdit CardClosed="() => spellOverlayVisible = false" />
            </MudDrawer>
            <CreatureEditCard Item="editItem" CardClosed="CardClosed" WeaponsOpened="() => weaponOverlayVisible = true" SpellsOpened="() => spellOverlayVisible = true"/>
        </MudPaper>
    </MudOverlay>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <div class="mud-table mud-elevation-1">
        <div class="mud-table-container">
            <table class="mud-table-root">
                <colgroup>
                    <col style="width:5%" />
                    <col />
                    <col style="width:35%"/>
                </colgroup>
                <thead class="mud-table-head">
                    <tr class="mud-table-row">
                        <th class="mud-table-cell">Init</th>
                        <th class="mud-table-cell">Name</th>
                        <th class="mud-table-cell">HP</th>
                    </tr>
                </thead>
                <tbody class="mud-table-body">
                    @foreach(EncounterItem item in encounter.Items.OrderByDescending(i => i.Initiative).Where(i => !i.Hidden))
                    {
                        <tr class="mud-table-row cursor-pointer" @onclick="() => ViewPersonClicked(item)">
                            <td class="mud-table-cell">@item.Initiative</td>
                            <td class="mud-table-cell">
                                <div class="d-flex gap-4">
                                    <MudAvatar>
                                        <MudImage Src="@("images/" + item.Creature.ImageSrc)" />
                                    </MudAvatar>
                                    <MudText Class="my-auto">@item.Creature.Name</MudText>
                                </div>
                            </td>
                            <td class="mud-table-cell">
                                <HealthEdit Item="item" GMView="false" TextSize="textSize" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <MudOverlay @bind-Visible="creatureOverlayVisible" DarkBackground>
        <MudPaper>
            <MobileCreatureEditCard Item="editItem" CardClosed="CardClosed"/>
        </MudPaper>
    </MudOverlay>
</MudHidden>

@code {
    private Timer _timer = new Timer(1000);
    private Typo textSize = Typo.h4;
    private bool creatureOverlayVisible;
    private bool weaponOverlayVisible = false;
    private bool spellOverlayVisible = false;
    private bool editInitative;
    private bool gmView;
    private string creatureSearch = "";
    private EncounterItem? editItem;
    private Encounter encounter = new();
    private Guid currentChange = Guid.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _timer.Elapsed += OnTimerElapsed;
            _timer.AutoReset = true;
            _timer.Enabled = true;
            encounter.Id = Guid.Empty;
            await RefreshEncounter();
        }
    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await RefreshEncounter();
        });
    }

    private async Task SaveEncounter()
    {
        encounter.ChangeId = Guid.NewGuid();
        currentChange = encounter.ChangeId;
        await db.UpdateEncounterAsync(encounter);
        Snackbar.Add("Save Succeeded", Severity.Success, config => { config.VisibleStateDuration = 1000; });
    }

    private async Task RefreshEncounter()
    {
        if (encounter.ChangeId != Guid.Empty)
        {
            if (encounter.ChangeId == currentChange) return;
        }
        if (encounter.Id == Guid.Empty)
            encounter = db.GetEncounters().First();
        else
            encounter = await db.GetEncounter(encounter.Id);
        currentChange = encounter.ChangeId;
        StateHasChanged(); 
    }

    async Task CopyCreature(EncounterItem item)
    {
        EncounterItem newItem = new();
        newItem.Creature = item.Creature;
        encounter.Items.Add(newItem);
        await SaveEncounter();
    }

    async Task RemoveCreature(EncounterItem item)
    {
        encounter.Items.Remove(item);
        await SaveEncounter();
    }

    async Task AddNewItem()
    {
        Creature? creature = await db.GetCreatureByName(creatureSearch);
        if (creature == null)
        {
            creature = new Creature { Name = creatureSearch };
            await db.UpdateAsync(creature);
        }
        var item = new EncounterItem { EncounterId = encounter.Id, CreatureId = creature.Id, CurrentHP = creature.MaxHP };
        await db.UpdateAsync(item);
        await RefreshEncounter();
    }

    async Task InitativeToggled()
    {
        editInitative = !editInitative;
        if (!editInitative)
            await SaveEncounter();
    }

    async Task<IEnumerable<string>> CreatureSearch(string value, CancellationToken token)
    {
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];

        List<Creature> creatures = await db.SearchCreature(value);
        return creatures.Select(c => c.Name);

    }

    async Task ViewPersonClicked(EncounterItem item)
    {
        creatureOverlayVisible = true;
        await RefreshEncounter();
        editItem = item;
    }

    async Task CardClosed()
    {
        if (editItem != null)
        {
            await db.UpdateEncounterItem(editItem);
            encounter.ChangeId = Guid.NewGuid();
            currentChange = encounter.ChangeId;
            await db.UpdateEncounterAsync(encounter);
            Snackbar.Add("Save Succeeded", Severity.Success, config => { config.VisibleStateDuration = 1000; });
        }
        creatureOverlayVisible = false;
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}
